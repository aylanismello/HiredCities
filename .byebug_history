exit
yo
yo= (1 .. (cities.length - idx)).to_a.inject(0, :+)
(1 .. (cities.length - idx)).to_a.inject(0, :+)
(1 .. (cities.length - idx)).to_a.inject(0)
(1 .. (cities.length - idx)).to_a
(1 .. (cities.length - idx))
cities.length - idx
idx
cities.length - idx
cities.length
exit
shortest_city_pair = cities_hash.keys {|city_pair| cities_hash[city_pair] == shortest_distance}.first
shortest_city_pair = cities_hash.keys.select_one {|city_pair| cities_hash[city_pair] == shortest_distance}
shortest_city_pair = cities_hash.keys.select {|city_pair| cities_hash[city_pair] == shortest_distance}
cities_hash.keys.select { |k| cities_hash[k] == shortest_distance }
cities_hash.keys.select { |k| cities_hash[k] == shorted_distance }
cities_hash.keys
shortest_city_pair.keys.first
shortest_city_pair
n
shortest_distance = cities_hash.values.sort.first
cities_hash.values.sort.first
cities_hash.values
cities_hash
shorted_distance = cities.hash_values.first
exit
cites["cities"]
cites
cites.cities
cites
cities
